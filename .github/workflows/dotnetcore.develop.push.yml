name: .NET Core push on develop branch
on:
  push:
    branches: [develop]
    
env:
  PROJECT_NAME: FweetMicroservice
  DOCKER_REPOSITORY: fweet-microservice


jobs:
  build:
    # The virtual machine that will be used on GitHub
    runs-on: ubuntu-18.04
    
    # Run the steps in a Docker container on the virtual machine
    container:
      image: mcr.microsoft.com/dotnet/core/sdk:3.1.201-bionic
      
    steps:
      # Checkout Git repository
      - uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
       
      # Decrypts appsettings.json
      - name: Decrypt the GPG encrypted config files
        run: gpg --quiet --batch --yes --passphrase ${{ secrets.GPG_PASSPHRASE }}  --output ./${{ env.PROJECT_NAME }}/appsettings.json --decrypt ./${{ env.PROJECT_NAME }}/appsettings.json.gpg

      # Install the dependencies needed for the project
      - name: Install dependencies
        run: dotnet restore
      
      # Build the project
      - name: Build
        run: dotnet build
      
      # Test the project
      - name: Test
        run: dotnet test
      
      # Publish the release build in the /release folder
      - name: Publish
        run: dotnet publish -c Release -o release
      
      # Upload the release folder and Dockerfile artifacts to this GitHub workflow for use in the next job
      - name: Upload release artifact
        uses: actions/upload-artifact@v1
        with:
          name: release-artifact
          path: ./release
     
      - name: Upload Dockerfile artifact
        uses: actions/upload-artifact@v1
        with:
          name: dockerfile-artifact
          path: ./Dockerfile
      
      - name: Upload Kubernetes artifact
        uses: actions/upload-artifact@v1
        with:
          name: kubernetes-artifact
          path: ./kube_development
          
  sonarscanner:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      
      - name: Sonarscanner for dotnet
        uses: Secbyte/dotnet-sonarscanner@v2.3
        with:
          buildCommand: dotnet build .
          testCommand: dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
          projectKey: S6FwutterFontys_${{ env.PROJECT_NAME }}
          projectName: ${{ env.PROJECT_NAME }}
          sonarOrganisation: s6fwutterfontys
          beginArguments: >
              /d:sonar.verbose="true"
              /d:sonar.cs.opencover.reportsPaths='"./${{ env.PROJECT_NAME }}Tests/coverage.xml"'
              /d:sonar.coverage.exclusions='"**/*.cs","**/*.md","**/sonar-project.properties"'
        env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_ACCESS_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deliver:
    needs: build
    runs-on: ubuntu-18.04
    steps:
      # Download artifacts from GitHub workflow to use in this job
      - name: Download release artifact
        uses: actions/download-artifact@v1
        with:
          name: release-artifact
          path: ./release

      - name: Download Dockerfile artifact
        uses: actions/download-artifact@v1
        with:
          name: dockerfile-artifact
          path: .
      
      # Deliver Docker image to DockerHub
      - name: Deliver Docker image
        env:
          CONTAINER_IMAGE: ${{ secrets.DOCKER_USER }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }}
          CONTAINER_IMAGE_LATEST: ${{ secrets.DOCKER_USER }}/${{ env.DOCKER_REPOSITORY }}:develop
        run: |
          docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_ACCESS_TOKEN }}
          docker build -t $CONTAINER_IMAGE -t $CONTAINER_IMAGE_LATEST .
          docker push $CONTAINER_IMAGE
          docker push $CONTAINER_IMAGE_LATEST
          
  deploy:
    needs: deliver
    runs-on: ubuntu-18.04
    steps:
      - name: Download Kubernetes artifact
        uses: actions/download-artifact@v1
        with:
          name: kubernetes-artifact
          path: ./kube_development
          
      - name: Setup Kubectl
        uses: Azure/setup-kubectl@v1
        
      - name: Set context via kubeconfig
        uses: Azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
      
      - name: Deploy to Kubernetes cluster
        uses: Azure/k8s-deploy@v1
        with:
          namespace: development
          manifests: |
            ./kube_development/deployment.yaml
            ./kube_development/ingress.yaml
            ./kube_development/service.yaml
            ./kube_development/autoscaler.yaml
          images: |
              ${{ secrets.DOCKER_USER }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }}